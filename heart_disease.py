# -*- coding: utf-8 -*-
"""Heart Disease.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SDqQhuqRjQ5mnVz-LDYEYO4cFFb83lY6

# Import files and Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# from google.colab import drive
# drive.mount('/content/drive')

df = pd.read_csv("heart.csv")
df.head()

"""# **Data Preparation**"""

df.isnull().sum()

d1 = df.duplicated().sum()
d1

df2 = df.drop_duplicates()
df2

df2.duplicated().sum()

df2.isnull().sum()

df2.head()

df2.describe().T

df3 = df2[df2['ca']<4]
df3 = df2[df2['thal']>0]
df3

df3['sex'][df3['sex']==0] = 'Female'
df3['sex'][df3['sex']==1] = 'Male'

df3["sex"].head()

df3["cp"][df3["cp"]==0] = 'typical agina'
df3["cp"][df3["cp"]==1] = 'atypical agina'
df3["cp"][df3["cp"]==2] = 'non - anginal pain'
df3["cp"][df3["cp"]==3] = 'asymptomatic'

df3["cp"].head()

df3["fbs"][df3["fbs"]==0] = 'low bp'
df3["fbs"][df3["fbs"]==1] = 'high bp'

df3["fbs"].head()

df3["exang"][df3["exang"]==0] = 'no'
df3["exang"][df3["exang"]==1] = 'yes'

df3["exang"].head()

df3["slope"][df3["slope"]==0] = 'upslope'
df3["slope"][df3["slope"]==1] = 'flat'
df3["slope"][df3["slope"]==2] = 'downslope'

df3["slope"].head()

df3["thal"][df3["thal"]==0] = 'normal'
df3["thal"][df3["thal"]==1] = 'fixed defect'
df3["thal"][df3["thal"]==2] = 'reversable defect'

df3["slope"].head()

df3["restecg"][df3["restecg"]==0] = 'normal'
df3["restecg"][df3["restecg"]==1] = 'ST - T wave abnormality'
df3["restecg"][df3["restecg"]==2] = 'left ventricular hypertrophy'

df3["restecg"].head()

df3.dtypes

df3.head()

df4 = df3.select_dtypes(include = ['float64', 'int64'])

df4.fillna(df4.median(), inplace = True)

plt.figure(figsize = (12, 10))
sns.heatmap(df4.corr(), annot = True, cmap = 'coolwarm')
plt.show()

"""# Data scaling

"""

x = df4.drop('target', axis = 1)
y = df4['target']

from sklearn.preprocessing import StandardScaler


scaler = StandardScaler()
x_scaled = scaler.fit_transform(x)

x_scaled_df = pd.DataFrame(x_scaled, columns = x.columns)
x_scaled_df.head()

# Split data into train and test sets
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(x_scaled_df, y, test_size=0.2, random_state=42)

# Train KNN classifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

k = 5
knn = KNeighborsClassifier(n_neighbors=k)
knn.fit(X_train, y_train)

# Make predictions
y_pred = knn.predict(X_test)

# Evaluate the model
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Try different K values
error_rate = []
for i in range(1, 21):
    knn_i = KNeighborsClassifier(n_neighbors=i)
    knn_i.fit(X_train, y_train)
    pred_i = knn_i.predict(X_test)
    error_rate.append(np.mean(pred_i != y_test))

# Plotting error rate vs K
plt.figure(figsize=(10,6))
plt.plot(range(1, 21), error_rate, marker='o', linestyle='--')
plt.title('Error Rate vs. K Value')
plt.xlabel('K')
plt.ylabel('Error Rate')
plt.grid(True)
plt.show()

import pickle

# Save the trained KNN model
with open("knn_model.pkl", "wb") as model_file:
    pickle.dump(knn, model_file)

# Save the fitted scaler
with open("scaler.pkl", "wb") as scaler_file:
    pickle.dump(scaler, scaler_file)

# Load model
with open("knn_model.pkl", "rb") as file:
    knn_model = pickle.load(file)

# Load scaler
with open("scaler.pkl", "rb") as file:
    scaler_loaded = pickle.load(file)

sample = [[60, 140, 250, 160, 1.5, 0]]

# Scale the sample
sample_scaled = scaler_loaded.transform(sample)

# Make prediction
prediction = knn_model.predict(sample_scaled)

# Show result
print("Prediction:", "Heart Disease" if prediction[0] == 1 else "No Heart Disease")

